using System;
using System.Windows;
using System.Windows.Xps.Packaging;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Windows.Documents;
using System.Windows.Media.Imaging;

namespace YellowstonePathology.Business.XPSDocument
{
    public delegate void ReplaceCallBackType(XmlNode node, XmlAttribute attribute);

    public class XPSTemplate
    {        
        List<XpsDetails> xpsImages = new List<XpsDetails>();
        List<XpsDetails> xpsFonts = new List<XpsDetails>();
        ReplaceCallBackType m_CallBack;

        public XPSTemplate()
        {

        }

        public bool CreateNewXPSFromSource(string sourceXpsPath, string destinationXpsPath, ReplaceCallBackType cb)
        {
            this.m_CallBack = cb;
            bool blnResult = false;

            try
            {
                // Delete the old file generated by our code.
                if (File.Exists(destinationXpsPath))
                    File.Delete(destinationXpsPath);

                // Creating the output XPS file.
                XpsDocument document = new XpsDocument(destinationXpsPath,
                    FileAccess.ReadWrite, System.IO.Packaging.CompressionOption.NotCompressed);
                
                IXpsFixedDocumentSequenceWriter docSeqWriter = document.AddFixedDocumentSequence();

                // Loading the source xps files to list to read them for edit.
                List<string> sourceFiles = new List<string>();
                sourceFiles.Add(sourceXpsPath);

                // Looping each source files.
                foreach (string sourceFile in sourceFiles)
                {
                    XpsDocument docToRead = new XpsDocument(sourceFile, FileAccess.ReadWrite);
                    IXpsFixedDocumentSequenceReader docSequenceToRead =
                        docToRead.FixedDocumentSequenceReader;

                    foreach (IXpsFixedDocumentReader fixedDocumentReader in
                        docSequenceToRead.FixedDocuments)
                    {

                        IXpsFixedDocumentWriter fixedDocumentWriter =
                            docSeqWriter.AddFixedDocument();

                        AddStructure(fixedDocumentReader, fixedDocumentWriter);

                        foreach (IXpsFixedPageReader fixedPageReader in
                            fixedDocumentReader.FixedPages)
                        {
                            IXpsFixedPageWriter pageWriter =
                                fixedDocumentWriter.AddFixedPage();

                            AddImages(fixedPageReader, pageWriter);

                            AddFonts(fixedPageReader, pageWriter);

                            AddContent(fixedPageReader, pageWriter);

                            // Commmit all changes.
                            pageWriter.Commit();

                        }
                        fixedDocumentWriter.Commit();
                    }
                    // Close the current source before openeing next one.
                    docToRead.Close();
                }

                docSeqWriter.Commit();                

                // Close newly created XPS document.
                document.Close();
                blnResult = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            return blnResult;
        }

        private static void AddStructure(IXpsFixedDocumentReader fixedDocumentReader, IXpsFixedDocumentWriter fixedDocumentWriter)
        {
            XpsStructure Structure = fixedDocumentReader.DocumentStructure;
            if (Structure != null)
            {
                XpsStructure myStructure = fixedDocumentWriter.AddDocumentStructure();
                using (Stream destStream = myStructure.GetStream())
                {
                    using (Stream sourceStream = Structure.GetStream())
                    {
                        CopyStream(sourceStream, destStream);
                        myStructure.Commit();
                    }
                }
            }
        }

        private static Int32 CopyStream(Stream sourceStream, Stream destStream)
        {
            const int size = 64 * 1024;
            byte[] localBuffer = new byte[size];
            int bytesRead;
            Int32 bytesMoved = 0;
            sourceStream.Seek(0, SeekOrigin.Begin);
            destStream.Seek(0, SeekOrigin.Begin);
            while ((bytesRead = sourceStream.Read(localBuffer, 0, size)) > 0)
            {
                destStream.Write(localBuffer, 0, bytesRead);
                bytesMoved += bytesRead;
            }
            return bytesMoved;
        }

        private void AddImages(IXpsFixedPageReader fixedPageReader, IXpsFixedPageWriter pageWriter)
        {
            // Adding images to resources.
            foreach (XpsImage image in fixedPageReader.Images)
            {
                XpsImage newImage = null;

                // Getting the URI to check the image extension.
                string sourceExt = image.Uri.ToString().ToLower();


                if (sourceExt.Contains(ImageType.PNG))
                {
                    newImage = pageWriter.AddImage(XpsImageType.PngImageType);
                }
                else if (sourceExt.Contains(ImageType.JPG) ||
                    sourceExt.Contains(ImageType.JPEG))
                {
                    newImage = pageWriter.AddImage(XpsImageType.JpegImageType);
                }
                else if (sourceExt.Contains(ImageType.TIF) ||
                    sourceExt.Contains(ImageType.TIFF))
                {
                    newImage = pageWriter.AddImage(XpsImageType.TiffImageType);
                }
                else if (sourceExt.Contains(ImageType.WDP))
                {
                    newImage = pageWriter.AddImage(XpsImageType.WdpImageType);
                }
                else
                {
                    newImage = null;
                }

                if (null != newImage)
                {
                    using (Stream dstImageStream = newImage.GetStream())
                    {
                        using (Stream srcImageStream = image.GetStream())
                        {
                            CopyStream(srcImageStream, dstImageStream);
                            newImage.Commit();
                            XpsDetails xpsImage = new XpsDetails();
                            xpsImage.resource = newImage;
                            xpsImage.sourceURI = image.Uri;
                            xpsImage.destURI = newImage.Uri;
                            xpsImages.Add(xpsImage);
                        }
                    }
                }

            }
        }

        private bool CheckIfFontAddedAlready(string uri)
        {
            bool IsFontAdded = false;

            foreach (XpsDetails data in xpsFonts)
            {
                if (data.sourceURI.ToString() == uri)
                {
                    IsFontAdded = true;
                }
            }

            return IsFontAdded;
        }

        private void WriteObfuscatedStream(string resourceName, Stream destStream, Stream sourceStream)
        {
            int bufSize = 0x1000;
            int guidByteSize = 16;
            int obfuscatedByte = 32;

            // Get the GUID byte from the resource name.  Typical Font name:
            //    /Resources/Fonts/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.ODTTF
            int startPos = resourceName.LastIndexOf('/') + 1;
            int length = resourceName.LastIndexOf('.') - startPos;
            resourceName = resourceName.Substring(startPos, length);

            Guid guid = new Guid(resourceName);

            string guidString = guid.ToString("N");

            // Parsing the guid string and coverted into byte value
            byte[] guidBytes = new byte[guidByteSize];
            for (int i = 0; i < guidBytes.Length; i++)
            {
                guidBytes[i] = Convert.ToByte(guidString.Substring(i * 2, 2), 16);
            }


            // XOR the first 32 bytes of the source
            // resource stream with GUID byte.
            byte[] buf = new byte[obfuscatedByte];
            sourceStream.Read(buf, 0, obfuscatedByte);

            for (int i = 0; i < obfuscatedByte; i++)
            {
                int guidBytesPos = guidBytes.Length - (i % guidBytes.Length) - 1;
                buf[i] ^= guidBytes[guidBytesPos];
            }
            destStream.Write(buf, 0, obfuscatedByte);

            // copy remaining stream from source without obfuscation
            buf = new byte[bufSize];

            int bytesRead = 0;
            while ((bytesRead = sourceStream.Read(buf, 0, bufSize)) > 0)
            {
                destStream.Write(buf, 0, bytesRead);
            }
            //}
        }

        private void WriteToStream(Stream destStream, Stream sourceStream)
        {
            const int bufSize = 0x1000;
            byte[] buf = new byte[bufSize];
            int bytesRead = 0;

            while ((bytesRead = sourceStream.Read(buf, 0, bufSize)) > 0)
            {
                destStream.Write(buf, 0, bytesRead);
            }

        }

        private void AddFonts(IXpsFixedPageReader fixedPageReader, IXpsFixedPageWriter pageWriter)
        {
            // Adding font from source to resources.
            foreach (XpsFont font in fixedPageReader.Fonts)
            {
                if (!CheckIfFontAddedAlready(font.Uri.ToString()))
                {
                    XpsFont newFont = pageWriter.AddFont(false);

                    using (Stream dstFontStream = newFont.GetStream())
                    {
                        using (Stream srcFontStream = font.GetStream())
                        {
                            if (font.IsObfuscated)
                            {
                                WriteObfuscatedStream(font.Uri.ToString(),
                                    dstFontStream, srcFontStream);
                            }
                            else
                            {
                                WriteToStream(dstFontStream, srcFontStream);
                            }
                            newFont.Commit();
                            XpsDetails xpsFont = new XpsDetails();
                            xpsFont.resource = newFont;
                            xpsFont.sourceURI = font.Uri;
                            xpsFont.destURI = newFont.Uri;
                            xpsFonts.Add(xpsFont);
                        }
                    }
                }

            }
        }

        private void AddContent(IXpsFixedPageReader fixedPageReader, IXpsFixedPageWriter pageWriter)
        {
            XmlDocument xmlDoc = new XmlDocument();            
            xmlDoc.Load(fixedPageReader.XmlReader);
            EditXPSContent(xmlDoc.ChildNodes);            
            xmlDoc.Save(pageWriter.XmlWriter);
        }

        private void EditXPSContent(XmlNodeList childNodes)
        {
            int maxvalue = childNodes.Count;
            for (int i = 0; i < maxvalue; i++)
            {
                XmlNode node = childNodes[i];

                if (node.HasChildNodes)
                {
                    EditXPSContent(node.ChildNodes);
                }

                if (node.NodeType == XmlNodeType.Element)
                {
                    if (node.Name == "Glyphs")
                    {
                        foreach (XmlAttribute attribute in node.Attributes)
                        {
                            if (attribute.Name == "UnicodeString")
                            {
                                this.m_CallBack(node, attribute);                                                                
                            }

                            if (attribute.Name == "FontUri")
                            {
                                node.Attributes["FontUri"].Value = GetNewFontUri(
                                    attribute.Value);
                            }
                        }
                    }
                    else if (node.Name == "ImageBrush")
                    {
                        foreach (XmlAttribute attribute in node.Attributes)
                        {
                            if (attribute.Name == "ImageSource")
                            {
                                // Get the uri of image added to resource.
                                attribute.Value = GetNewImageUri(attribute.Value);
                            }
                        }
                    }
                }
            }
        }        

        private string GetNewImageUri(string oldUri)
        {
            string result = string.Empty;
            foreach (XpsDetails data in xpsImages)
            {
                if (data.sourceURI.ToString() == oldUri.ToString())
                {
                    result = data.destURI.ToString();
                }
            }
            return result;
        }

        private string GetNumFontUri()
        {
            string uri = string.Empty;
            foreach (XpsDetails dat in xpsFonts)
            {
                if (dat.sourceURI.ToString() == dat.destURI.ToString())
                {
                    uri = dat.destURI.ToString();
                    break;
                }
            }
            return uri;
        }

        private string GetNewFontUri(string oldUri)
        {
            string result = string.Empty;
            foreach (XpsDetails data in xpsFonts)
            {
                if (data.sourceURI.ToString() == oldUri.ToString())
                {
                    result = data.destURI.ToString();
                }
            }
            return result;
        }

        public void SaveToTIF(string fileName)
        {
            XpsDocument xd = new XpsDocument(fileName, System.IO.FileAccess.Read);
            FixedDocumentSequence fds = xd.GetFixedDocumentSequence();
            DocumentPaginator paginator = fds.DocumentPaginator;
            System.Windows.Media.Visual visual = paginator.GetPage(0).Visual;

            System.Windows.FrameworkElement fe = (System.Windows.FrameworkElement)visual;

            int multiplyFactor = 4;
            string outputPath = fileName.Replace(".xps", ".tif");

            RenderTargetBitmap bmp = new RenderTargetBitmap(
                (int)fe.ActualWidth * multiplyFactor,
                (int)fe.ActualHeight * multiplyFactor,
                96d * multiplyFactor,
                96d * multiplyFactor,
                System.Windows.Media.PixelFormats.Default);
            bmp.Render(fe);

            TiffBitmapEncoder tff = new TiffBitmapEncoder();
            tff.Frames.Add(BitmapFrame.Create(bmp));

            using (Stream stream = File.Create(outputPath))
            {
                tff.Save(stream);
            }
        }
    }
}

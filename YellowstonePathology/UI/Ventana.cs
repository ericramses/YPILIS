// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ventana.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ventana {

  /// <summary>Holder for reflection information generated from ventana.proto</summary>
  public static partial class VentanaReflection {

    #region Descriptor
    /// <summary>File descriptor for ventana.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VentanaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg12ZW50YW5hLnByb3RvEgd2ZW50YW5hIhkKCk9yZGVyUmVwbHkSCwoDaGw3",
            "GAEgASgJIqYBCgxPcmRlclJlcXVlc3QSGQoDbXNoGAEgASgLMgwudmVudGFu",
            "YS5tc2gSGQoDcGlkGAIgASgLMgwudmVudGFuYS5waWQSGQoDcHYxGAMgASgL",
            "MgwudmVudGFuYS5wdjESGQoDc2FjGAQgASgLMgwudmVudGFuYS5zYWMSKgoM",
            "c3RhaW5fb3JkZXJzGAUgAygLMhQudmVudGFuYS5zdGFpbl9vcmRlciJDCgtz",
            "dGFpbl9vcmRlchIZCgNvcmMYASABKAsyDC52ZW50YW5hLm9yYxIZCgNvYnIY",
            "AiABKAsyDC52ZW50YW5hLm9iciLHAQoDbXNoEhsKE3NlbmRpbmdfYXBwbGlj",
            "YXRpb24YASABKAkSGAoQc2VuZGluZ19mYWNpbGl0eRgCIAEoCRIdChVyZWNl",
            "aXZpbmdfYXBwbGljYXRpb24YAyABKAkSGgoScmVjZWl2aW5nX2ZhY2lsaXR5",
            "GAQgASgJEhwKFGRhdGVfdGltZV9vZl9tZXNzYWdlGAUgASgJEhQKDG1lc3Nh",
            "Z2VfdHlwZRgGIAEoCRIaChJtZXNzYWdlX2NvbnRyb2xfaWQYByABKAkigwEK",
            "A3BpZBIdChVtZWRpY2FsX3JlY29yZF9udW1iZXIYASABKAkSEQoJbGFzdF9u",
            "YW1lGAIgASgJEhIKCmZpcnN0X25hbWUYAyABKAkSFgoObWlkZGxlX2luaXRp",
            "YWwYBCABKAkSEQoJYmlydGhkYXRlGAUgASgJEgsKA3NleBgGIAEoCSJ2CgNw",
            "djESIAoYcmVxdWVzdGluZ19waHlzaWNpYW5fbnBpGAEgASgJEiUKHXJlcXVl",
            "c3RpbmdfcGh5c2ljaWFuX2xhc3RuYW1lGAIgASgJEiYKHnJlcXVlc3Rpbmdf",
            "cGh5c2ljaWFuX2ZpcnN0bmFtZRgDIAEoCSIlCgNzYWMSHgoWcmVnaXN0cmF0",
            "aW9uX2RhdGVfdGltZRgBIAEoCSKUAQoDb3JjEhUKDW9yZGVyX2NvbnRyb2wY",
            "ASABKAkSGwoTcGxhY2VyX29yZGVyX251bWJlchgCIAEoCRIRCglzaXRlX25h",
            "bWUYAyABKAkSGAoQc2l0ZV9kZXNjcmlwdGlvbhgEIAEoCRIVCg1mYWNpbGl0",
            "eV9jb2RlGAUgASgJEhUKDWZhY2lsaXR5X25hbWUYBiABKAkizwMKA29ichIZ",
            "ChFvcmRlcl9zZXF1ZW5jZV9pZBgBIAEoCRIbChNwbGFjZXJfb3JkZXJfbnVt",
            "YmVyGAIgASgJEhcKD3Byb3RvY29sX251bWJlchgDIAEoCRIVCg1wcm90b2Nv",
            "bF9uYW1lGAQgASgJEhIKCm9yZGVyX3R5cGUYBSABKAkSHQoVb2JzZXJ2YXRp",
            "b25fZGF0ZV90aW1lGAYgASgJEhUKDXNwZWNpbWVuX25hbWUYByABKAkSHAoU",
            "c3BlY2ltZW5fZGVzY3JpcHRpb24YCCABKAkSHwoXc3VyZ2ljYWxfcHJvY2Vk",
            "dXJlX25hbWUYCSABKAkSFwoPcGF0aG9sb2dpc3RfbnBpGAogASgJEhwKFHBh",
            "dGhvbG9naXN0X2xhc3RuYW1lGAsgASgJEh0KFXBhdGhvbG9naXN0X2ZpcnN0",
            "bmFtZRgMIAEoCRIQCghzbGlkZV9pZBgNIAEoCRIWCg5zbGlkZV9zZXF1ZW5j",
            "ZRgOIAEoCRIPCgdibG9ja2lkGA8gASgJEhYKDmJsb2NrX3NlcXVlbmNlGBAg",
            "ASgJEhMKC3NwZWNpbWVuX2lkGBEgASgJEhkKEXNwZWNpbWVuX3NlcXVlbmNl",
            "GBIgASgJMkYKClN0YWluT3JkZXISOAoIZ2V0T3JkZXISFS52ZW50YW5hLk9y",
            "ZGVyUmVxdWVzdBoTLnZlbnRhbmEuT3JkZXJSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.OrderReply), global::Ventana.OrderReply.Parser, new[]{ "Hl7" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.OrderRequest), global::Ventana.OrderRequest.Parser, new[]{ "Msh", "Pid", "Pv1", "Sac", "StainOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.stain_order), global::Ventana.stain_order.Parser, new[]{ "Orc", "Obr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.msh), global::Ventana.msh.Parser, new[]{ "SendingApplication", "SendingFacility", "ReceivingApplication", "ReceivingFacility", "DateTimeOfMessage", "MessageType", "MessageControlId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.pid), global::Ventana.pid.Parser, new[]{ "MedicalRecordNumber", "LastName", "FirstName", "MiddleInitial", "Birthdate", "Sex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.pv1), global::Ventana.pv1.Parser, new[]{ "RequestingPhysicianNpi", "RequestingPhysicianLastname", "RequestingPhysicianFirstname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.sac), global::Ventana.sac.Parser, new[]{ "RegistrationDateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.orc), global::Ventana.orc.Parser, new[]{ "OrderControl", "PlacerOrderNumber", "SiteName", "SiteDescription", "FacilityCode", "FacilityName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ventana.obr), global::Ventana.obr.Parser, new[]{ "OrderSequenceId", "PlacerOrderNumber", "ProtocolNumber", "ProtocolName", "OrderType", "ObservationDateTime", "SpecimenName", "SpecimenDescription", "SurgicalProcedureName", "PathologistNpi", "PathologistLastname", "PathologistFirstname", "SlideId", "SlideSequence", "Blockid", "BlockSequence", "SpecimenId", "SpecimenSequence" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OrderReply : pb::IMessage<OrderReply> {
    private static readonly pb::MessageParser<OrderReply> _parser = new pb::MessageParser<OrderReply>(() => new OrderReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReply(OrderReply other) : this() {
      hl7_ = other.hl7_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderReply Clone() {
      return new OrderReply(this);
    }

    /// <summary>Field number for the "hl7" field.</summary>
    public const int Hl7FieldNumber = 1;
    private string hl7_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hl7 {
      get { return hl7_; }
      set {
        hl7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hl7 != other.Hl7) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hl7.Length != 0) hash ^= Hl7.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hl7.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hl7);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hl7.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hl7);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderReply other) {
      if (other == null) {
        return;
      }
      if (other.Hl7.Length != 0) {
        Hl7 = other.Hl7;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hl7 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderRequest : pb::IMessage<OrderRequest> {
    private static readonly pb::MessageParser<OrderRequest> _parser = new pb::MessageParser<OrderRequest>(() => new OrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest(OrderRequest other) : this() {
      Msh = other.msh_ != null ? other.Msh.Clone() : null;
      Pid = other.pid_ != null ? other.Pid.Clone() : null;
      Pv1 = other.pv1_ != null ? other.Pv1.Clone() : null;
      Sac = other.sac_ != null ? other.Sac.Clone() : null;
      stainOrders_ = other.stainOrders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest Clone() {
      return new OrderRequest(this);
    }

    /// <summary>Field number for the "msh" field.</summary>
    public const int MshFieldNumber = 1;
    private global::Ventana.msh msh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.msh Msh {
      get { return msh_; }
      set {
        msh_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private global::Ventana.pid pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.pid Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "pv1" field.</summary>
    public const int Pv1FieldNumber = 3;
    private global::Ventana.pv1 pv1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.pv1 Pv1 {
      get { return pv1_; }
      set {
        pv1_ = value;
      }
    }

    /// <summary>Field number for the "sac" field.</summary>
    public const int SacFieldNumber = 4;
    private global::Ventana.sac sac_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.sac Sac {
      get { return sac_; }
      set {
        sac_ = value;
      }
    }

    /// <summary>Field number for the "stain_orders" field.</summary>
    public const int StainOrdersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Ventana.stain_order> _repeated_stainOrders_codec
        = pb::FieldCodec.ForMessage(42, global::Ventana.stain_order.Parser);
    private readonly pbc::RepeatedField<global::Ventana.stain_order> stainOrders_ = new pbc::RepeatedField<global::Ventana.stain_order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ventana.stain_order> StainOrders {
      get { return stainOrders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msh, other.Msh)) return false;
      if (!object.Equals(Pid, other.Pid)) return false;
      if (!object.Equals(Pv1, other.Pv1)) return false;
      if (!object.Equals(Sac, other.Sac)) return false;
      if(!stainOrders_.Equals(other.stainOrders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msh_ != null) hash ^= Msh.GetHashCode();
      if (pid_ != null) hash ^= Pid.GetHashCode();
      if (pv1_ != null) hash ^= Pv1.GetHashCode();
      if (sac_ != null) hash ^= Sac.GetHashCode();
      hash ^= stainOrders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msh_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msh);
      }
      if (pid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pid);
      }
      if (pv1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pv1);
      }
      if (sac_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Sac);
      }
      stainOrders_.WriteTo(output, _repeated_stainOrders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msh);
      }
      if (pid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pid);
      }
      if (pv1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pv1);
      }
      if (sac_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sac);
      }
      size += stainOrders_.CalculateSize(_repeated_stainOrders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.msh_ != null) {
        if (msh_ == null) {
          msh_ = new global::Ventana.msh();
        }
        Msh.MergeFrom(other.Msh);
      }
      if (other.pid_ != null) {
        if (pid_ == null) {
          pid_ = new global::Ventana.pid();
        }
        Pid.MergeFrom(other.Pid);
      }
      if (other.pv1_ != null) {
        if (pv1_ == null) {
          pv1_ = new global::Ventana.pv1();
        }
        Pv1.MergeFrom(other.Pv1);
      }
      if (other.sac_ != null) {
        if (sac_ == null) {
          sac_ = new global::Ventana.sac();
        }
        Sac.MergeFrom(other.Sac);
      }
      stainOrders_.Add(other.stainOrders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (msh_ == null) {
              msh_ = new global::Ventana.msh();
            }
            input.ReadMessage(msh_);
            break;
          }
          case 18: {
            if (pid_ == null) {
              pid_ = new global::Ventana.pid();
            }
            input.ReadMessage(pid_);
            break;
          }
          case 26: {
            if (pv1_ == null) {
              pv1_ = new global::Ventana.pv1();
            }
            input.ReadMessage(pv1_);
            break;
          }
          case 34: {
            if (sac_ == null) {
              sac_ = new global::Ventana.sac();
            }
            input.ReadMessage(sac_);
            break;
          }
          case 42: {
            stainOrders_.AddEntriesFrom(input, _repeated_stainOrders_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class stain_order : pb::IMessage<stain_order> {
    private static readonly pb::MessageParser<stain_order> _parser = new pb::MessageParser<stain_order>(() => new stain_order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<stain_order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stain_order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stain_order(stain_order other) : this() {
      Orc = other.orc_ != null ? other.Orc.Clone() : null;
      Obr = other.obr_ != null ? other.Obr.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stain_order Clone() {
      return new stain_order(this);
    }

    /// <summary>Field number for the "orc" field.</summary>
    public const int OrcFieldNumber = 1;
    private global::Ventana.orc orc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.orc Orc {
      get { return orc_; }
      set {
        orc_ = value;
      }
    }

    /// <summary>Field number for the "obr" field.</summary>
    public const int ObrFieldNumber = 2;
    private global::Ventana.obr obr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ventana.obr Obr {
      get { return obr_; }
      set {
        obr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as stain_order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(stain_order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Orc, other.Orc)) return false;
      if (!object.Equals(Obr, other.Obr)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (orc_ != null) hash ^= Orc.GetHashCode();
      if (obr_ != null) hash ^= Obr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (orc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Orc);
      }
      if (obr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Obr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (orc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orc);
      }
      if (obr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(stain_order other) {
      if (other == null) {
        return;
      }
      if (other.orc_ != null) {
        if (orc_ == null) {
          orc_ = new global::Ventana.orc();
        }
        Orc.MergeFrom(other.Orc);
      }
      if (other.obr_ != null) {
        if (obr_ == null) {
          obr_ = new global::Ventana.obr();
        }
        Obr.MergeFrom(other.Obr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (orc_ == null) {
              orc_ = new global::Ventana.orc();
            }
            input.ReadMessage(orc_);
            break;
          }
          case 18: {
            if (obr_ == null) {
              obr_ = new global::Ventana.obr();
            }
            input.ReadMessage(obr_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class msh : pb::IMessage<msh> {
    private static readonly pb::MessageParser<msh> _parser = new pb::MessageParser<msh>(() => new msh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<msh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public msh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public msh(msh other) : this() {
      sendingApplication_ = other.sendingApplication_;
      sendingFacility_ = other.sendingFacility_;
      receivingApplication_ = other.receivingApplication_;
      receivingFacility_ = other.receivingFacility_;
      dateTimeOfMessage_ = other.dateTimeOfMessage_;
      messageType_ = other.messageType_;
      messageControlId_ = other.messageControlId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public msh Clone() {
      return new msh(this);
    }

    /// <summary>Field number for the "sending_application" field.</summary>
    public const int SendingApplicationFieldNumber = 1;
    private string sendingApplication_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendingApplication {
      get { return sendingApplication_; }
      set {
        sendingApplication_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sending_facility" field.</summary>
    public const int SendingFacilityFieldNumber = 2;
    private string sendingFacility_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendingFacility {
      get { return sendingFacility_; }
      set {
        sendingFacility_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiving_application" field.</summary>
    public const int ReceivingApplicationFieldNumber = 3;
    private string receivingApplication_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceivingApplication {
      get { return receivingApplication_; }
      set {
        receivingApplication_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receiving_facility" field.</summary>
    public const int ReceivingFacilityFieldNumber = 4;
    private string receivingFacility_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceivingFacility {
      get { return receivingFacility_; }
      set {
        receivingFacility_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date_time_of_message" field.</summary>
    public const int DateTimeOfMessageFieldNumber = 5;
    private string dateTimeOfMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTimeOfMessage {
      get { return dateTimeOfMessage_; }
      set {
        dateTimeOfMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 6;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_control_id" field.</summary>
    public const int MessageControlIdFieldNumber = 7;
    private string messageControlId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageControlId {
      get { return messageControlId_; }
      set {
        messageControlId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as msh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(msh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendingApplication != other.SendingApplication) return false;
      if (SendingFacility != other.SendingFacility) return false;
      if (ReceivingApplication != other.ReceivingApplication) return false;
      if (ReceivingFacility != other.ReceivingFacility) return false;
      if (DateTimeOfMessage != other.DateTimeOfMessage) return false;
      if (MessageType != other.MessageType) return false;
      if (MessageControlId != other.MessageControlId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SendingApplication.Length != 0) hash ^= SendingApplication.GetHashCode();
      if (SendingFacility.Length != 0) hash ^= SendingFacility.GetHashCode();
      if (ReceivingApplication.Length != 0) hash ^= ReceivingApplication.GetHashCode();
      if (ReceivingFacility.Length != 0) hash ^= ReceivingFacility.GetHashCode();
      if (DateTimeOfMessage.Length != 0) hash ^= DateTimeOfMessage.GetHashCode();
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (MessageControlId.Length != 0) hash ^= MessageControlId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SendingApplication.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SendingApplication);
      }
      if (SendingFacility.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendingFacility);
      }
      if (ReceivingApplication.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReceivingApplication);
      }
      if (ReceivingFacility.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReceivingFacility);
      }
      if (DateTimeOfMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DateTimeOfMessage);
      }
      if (MessageType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MessageType);
      }
      if (MessageControlId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MessageControlId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SendingApplication.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendingApplication);
      }
      if (SendingFacility.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendingFacility);
      }
      if (ReceivingApplication.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceivingApplication);
      }
      if (ReceivingFacility.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceivingFacility);
      }
      if (DateTimeOfMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTimeOfMessage);
      }
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (MessageControlId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageControlId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(msh other) {
      if (other == null) {
        return;
      }
      if (other.SendingApplication.Length != 0) {
        SendingApplication = other.SendingApplication;
      }
      if (other.SendingFacility.Length != 0) {
        SendingFacility = other.SendingFacility;
      }
      if (other.ReceivingApplication.Length != 0) {
        ReceivingApplication = other.ReceivingApplication;
      }
      if (other.ReceivingFacility.Length != 0) {
        ReceivingFacility = other.ReceivingFacility;
      }
      if (other.DateTimeOfMessage.Length != 0) {
        DateTimeOfMessage = other.DateTimeOfMessage;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.MessageControlId.Length != 0) {
        MessageControlId = other.MessageControlId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SendingApplication = input.ReadString();
            break;
          }
          case 18: {
            SendingFacility = input.ReadString();
            break;
          }
          case 26: {
            ReceivingApplication = input.ReadString();
            break;
          }
          case 34: {
            ReceivingFacility = input.ReadString();
            break;
          }
          case 42: {
            DateTimeOfMessage = input.ReadString();
            break;
          }
          case 50: {
            MessageType = input.ReadString();
            break;
          }
          case 58: {
            MessageControlId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pid : pb::IMessage<pid> {
    private static readonly pb::MessageParser<pid> _parser = new pb::MessageParser<pid>(() => new pid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pid(pid other) : this() {
      medicalRecordNumber_ = other.medicalRecordNumber_;
      lastName_ = other.lastName_;
      firstName_ = other.firstName_;
      middleInitial_ = other.middleInitial_;
      birthdate_ = other.birthdate_;
      sex_ = other.sex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pid Clone() {
      return new pid(this);
    }

    /// <summary>Field number for the "medical_record_number" field.</summary>
    public const int MedicalRecordNumberFieldNumber = 1;
    private string medicalRecordNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MedicalRecordNumber {
      get { return medicalRecordNumber_; }
      set {
        medicalRecordNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 2;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 3;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "middle_initial" field.</summary>
    public const int MiddleInitialFieldNumber = 4;
    private string middleInitial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MiddleInitial {
      get { return middleInitial_; }
      set {
        middleInitial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "birthdate" field.</summary>
    public const int BirthdateFieldNumber = 5;
    private string birthdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Birthdate {
      get { return birthdate_; }
      set {
        birthdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private string sex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MedicalRecordNumber != other.MedicalRecordNumber) return false;
      if (LastName != other.LastName) return false;
      if (FirstName != other.FirstName) return false;
      if (MiddleInitial != other.MiddleInitial) return false;
      if (Birthdate != other.Birthdate) return false;
      if (Sex != other.Sex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MedicalRecordNumber.Length != 0) hash ^= MedicalRecordNumber.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (MiddleInitial.Length != 0) hash ^= MiddleInitial.GetHashCode();
      if (Birthdate.Length != 0) hash ^= Birthdate.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MedicalRecordNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MedicalRecordNumber);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LastName);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirstName);
      }
      if (MiddleInitial.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MiddleInitial);
      }
      if (Birthdate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Birthdate);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MedicalRecordNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MedicalRecordNumber);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (MiddleInitial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MiddleInitial);
      }
      if (Birthdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Birthdate);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pid other) {
      if (other == null) {
        return;
      }
      if (other.MedicalRecordNumber.Length != 0) {
        MedicalRecordNumber = other.MedicalRecordNumber;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.MiddleInitial.Length != 0) {
        MiddleInitial = other.MiddleInitial;
      }
      if (other.Birthdate.Length != 0) {
        Birthdate = other.Birthdate;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MedicalRecordNumber = input.ReadString();
            break;
          }
          case 18: {
            LastName = input.ReadString();
            break;
          }
          case 26: {
            FirstName = input.ReadString();
            break;
          }
          case 34: {
            MiddleInitial = input.ReadString();
            break;
          }
          case 42: {
            Birthdate = input.ReadString();
            break;
          }
          case 50: {
            Sex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pv1 : pb::IMessage<pv1> {
    private static readonly pb::MessageParser<pv1> _parser = new pb::MessageParser<pv1>(() => new pv1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pv1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pv1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pv1(pv1 other) : this() {
      requestingPhysicianNpi_ = other.requestingPhysicianNpi_;
      requestingPhysicianLastname_ = other.requestingPhysicianLastname_;
      requestingPhysicianFirstname_ = other.requestingPhysicianFirstname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pv1 Clone() {
      return new pv1(this);
    }

    /// <summary>Field number for the "requesting_physician_npi" field.</summary>
    public const int RequestingPhysicianNpiFieldNumber = 1;
    private string requestingPhysicianNpi_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestingPhysicianNpi {
      get { return requestingPhysicianNpi_; }
      set {
        requestingPhysicianNpi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requesting_physician_lastname" field.</summary>
    public const int RequestingPhysicianLastnameFieldNumber = 2;
    private string requestingPhysicianLastname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestingPhysicianLastname {
      get { return requestingPhysicianLastname_; }
      set {
        requestingPhysicianLastname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requesting_physician_firstname" field.</summary>
    public const int RequestingPhysicianFirstnameFieldNumber = 3;
    private string requestingPhysicianFirstname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestingPhysicianFirstname {
      get { return requestingPhysicianFirstname_; }
      set {
        requestingPhysicianFirstname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pv1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pv1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestingPhysicianNpi != other.RequestingPhysicianNpi) return false;
      if (RequestingPhysicianLastname != other.RequestingPhysicianLastname) return false;
      if (RequestingPhysicianFirstname != other.RequestingPhysicianFirstname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestingPhysicianNpi.Length != 0) hash ^= RequestingPhysicianNpi.GetHashCode();
      if (RequestingPhysicianLastname.Length != 0) hash ^= RequestingPhysicianLastname.GetHashCode();
      if (RequestingPhysicianFirstname.Length != 0) hash ^= RequestingPhysicianFirstname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestingPhysicianNpi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestingPhysicianNpi);
      }
      if (RequestingPhysicianLastname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestingPhysicianLastname);
      }
      if (RequestingPhysicianFirstname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestingPhysicianFirstname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestingPhysicianNpi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestingPhysicianNpi);
      }
      if (RequestingPhysicianLastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestingPhysicianLastname);
      }
      if (RequestingPhysicianFirstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestingPhysicianFirstname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pv1 other) {
      if (other == null) {
        return;
      }
      if (other.RequestingPhysicianNpi.Length != 0) {
        RequestingPhysicianNpi = other.RequestingPhysicianNpi;
      }
      if (other.RequestingPhysicianLastname.Length != 0) {
        RequestingPhysicianLastname = other.RequestingPhysicianLastname;
      }
      if (other.RequestingPhysicianFirstname.Length != 0) {
        RequestingPhysicianFirstname = other.RequestingPhysicianFirstname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestingPhysicianNpi = input.ReadString();
            break;
          }
          case 18: {
            RequestingPhysicianLastname = input.ReadString();
            break;
          }
          case 26: {
            RequestingPhysicianFirstname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class sac : pb::IMessage<sac> {
    private static readonly pb::MessageParser<sac> _parser = new pb::MessageParser<sac>(() => new sac());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sac> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sac() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sac(sac other) : this() {
      registrationDateTime_ = other.registrationDateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public sac Clone() {
      return new sac(this);
    }

    /// <summary>Field number for the "registration_date_time" field.</summary>
    public const int RegistrationDateTimeFieldNumber = 1;
    private string registrationDateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistrationDateTime {
      get { return registrationDateTime_; }
      set {
        registrationDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as sac);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(sac other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegistrationDateTime != other.RegistrationDateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegistrationDateTime.Length != 0) hash ^= RegistrationDateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegistrationDateTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RegistrationDateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegistrationDateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationDateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(sac other) {
      if (other == null) {
        return;
      }
      if (other.RegistrationDateTime.Length != 0) {
        RegistrationDateTime = other.RegistrationDateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RegistrationDateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class orc : pb::IMessage<orc> {
    private static readonly pb::MessageParser<orc> _parser = new pb::MessageParser<orc>(() => new orc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<orc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public orc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public orc(orc other) : this() {
      orderControl_ = other.orderControl_;
      placerOrderNumber_ = other.placerOrderNumber_;
      siteName_ = other.siteName_;
      siteDescription_ = other.siteDescription_;
      facilityCode_ = other.facilityCode_;
      facilityName_ = other.facilityName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public orc Clone() {
      return new orc(this);
    }

    /// <summary>Field number for the "order_control" field.</summary>
    public const int OrderControlFieldNumber = 1;
    private string orderControl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderControl {
      get { return orderControl_; }
      set {
        orderControl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placer_order_number" field.</summary>
    public const int PlacerOrderNumberFieldNumber = 2;
    private string placerOrderNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlacerOrderNumber {
      get { return placerOrderNumber_; }
      set {
        placerOrderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site_name" field.</summary>
    public const int SiteNameFieldNumber = 3;
    private string siteName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SiteName {
      get { return siteName_; }
      set {
        siteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site_description" field.</summary>
    public const int SiteDescriptionFieldNumber = 4;
    private string siteDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SiteDescription {
      get { return siteDescription_; }
      set {
        siteDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facility_code" field.</summary>
    public const int FacilityCodeFieldNumber = 5;
    private string facilityCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacilityCode {
      get { return facilityCode_; }
      set {
        facilityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facility_name" field.</summary>
    public const int FacilityNameFieldNumber = 6;
    private string facilityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacilityName {
      get { return facilityName_; }
      set {
        facilityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as orc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(orc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderControl != other.OrderControl) return false;
      if (PlacerOrderNumber != other.PlacerOrderNumber) return false;
      if (SiteName != other.SiteName) return false;
      if (SiteDescription != other.SiteDescription) return false;
      if (FacilityCode != other.FacilityCode) return false;
      if (FacilityName != other.FacilityName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderControl.Length != 0) hash ^= OrderControl.GetHashCode();
      if (PlacerOrderNumber.Length != 0) hash ^= PlacerOrderNumber.GetHashCode();
      if (SiteName.Length != 0) hash ^= SiteName.GetHashCode();
      if (SiteDescription.Length != 0) hash ^= SiteDescription.GetHashCode();
      if (FacilityCode.Length != 0) hash ^= FacilityCode.GetHashCode();
      if (FacilityName.Length != 0) hash ^= FacilityName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderControl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderControl);
      }
      if (PlacerOrderNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlacerOrderNumber);
      }
      if (SiteName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SiteName);
      }
      if (SiteDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SiteDescription);
      }
      if (FacilityCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FacilityCode);
      }
      if (FacilityName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FacilityName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderControl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderControl);
      }
      if (PlacerOrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlacerOrderNumber);
      }
      if (SiteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteName);
      }
      if (SiteDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteDescription);
      }
      if (FacilityCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacilityCode);
      }
      if (FacilityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacilityName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(orc other) {
      if (other == null) {
        return;
      }
      if (other.OrderControl.Length != 0) {
        OrderControl = other.OrderControl;
      }
      if (other.PlacerOrderNumber.Length != 0) {
        PlacerOrderNumber = other.PlacerOrderNumber;
      }
      if (other.SiteName.Length != 0) {
        SiteName = other.SiteName;
      }
      if (other.SiteDescription.Length != 0) {
        SiteDescription = other.SiteDescription;
      }
      if (other.FacilityCode.Length != 0) {
        FacilityCode = other.FacilityCode;
      }
      if (other.FacilityName.Length != 0) {
        FacilityName = other.FacilityName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderControl = input.ReadString();
            break;
          }
          case 18: {
            PlacerOrderNumber = input.ReadString();
            break;
          }
          case 26: {
            SiteName = input.ReadString();
            break;
          }
          case 34: {
            SiteDescription = input.ReadString();
            break;
          }
          case 42: {
            FacilityCode = input.ReadString();
            break;
          }
          case 50: {
            FacilityName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class obr : pb::IMessage<obr> {
    private static readonly pb::MessageParser<obr> _parser = new pb::MessageParser<obr>(() => new obr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<obr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ventana.VentanaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public obr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public obr(obr other) : this() {
      orderSequenceId_ = other.orderSequenceId_;
      placerOrderNumber_ = other.placerOrderNumber_;
      protocolNumber_ = other.protocolNumber_;
      protocolName_ = other.protocolName_;
      orderType_ = other.orderType_;
      observationDateTime_ = other.observationDateTime_;
      specimenName_ = other.specimenName_;
      specimenDescription_ = other.specimenDescription_;
      surgicalProcedureName_ = other.surgicalProcedureName_;
      pathologistNpi_ = other.pathologistNpi_;
      pathologistLastname_ = other.pathologistLastname_;
      pathologistFirstname_ = other.pathologistFirstname_;
      slideId_ = other.slideId_;
      slideSequence_ = other.slideSequence_;
      blockid_ = other.blockid_;
      blockSequence_ = other.blockSequence_;
      specimenId_ = other.specimenId_;
      specimenSequence_ = other.specimenSequence_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public obr Clone() {
      return new obr(this);
    }

    /// <summary>Field number for the "order_sequence_id" field.</summary>
    public const int OrderSequenceIdFieldNumber = 1;
    private string orderSequenceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderSequenceId {
      get { return orderSequenceId_; }
      set {
        orderSequenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placer_order_number" field.</summary>
    public const int PlacerOrderNumberFieldNumber = 2;
    private string placerOrderNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlacerOrderNumber {
      get { return placerOrderNumber_; }
      set {
        placerOrderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_number" field.</summary>
    public const int ProtocolNumberFieldNumber = 3;
    private string protocolNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolNumber {
      get { return protocolNumber_; }
      set {
        protocolNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_name" field.</summary>
    public const int ProtocolNameFieldNumber = 4;
    private string protocolName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolName {
      get { return protocolName_; }
      set {
        protocolName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 5;
    private string orderType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderType {
      get { return orderType_; }
      set {
        orderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "observation_date_time" field.</summary>
    public const int ObservationDateTimeFieldNumber = 6;
    private string observationDateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObservationDateTime {
      get { return observationDateTime_; }
      set {
        observationDateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specimen_name" field.</summary>
    public const int SpecimenNameFieldNumber = 7;
    private string specimenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecimenName {
      get { return specimenName_; }
      set {
        specimenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specimen_description" field.</summary>
    public const int SpecimenDescriptionFieldNumber = 8;
    private string specimenDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecimenDescription {
      get { return specimenDescription_; }
      set {
        specimenDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "surgical_procedure_name" field.</summary>
    public const int SurgicalProcedureNameFieldNumber = 9;
    private string surgicalProcedureName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SurgicalProcedureName {
      get { return surgicalProcedureName_; }
      set {
        surgicalProcedureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathologist_npi" field.</summary>
    public const int PathologistNpiFieldNumber = 10;
    private string pathologistNpi_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathologistNpi {
      get { return pathologistNpi_; }
      set {
        pathologistNpi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathologist_lastname" field.</summary>
    public const int PathologistLastnameFieldNumber = 11;
    private string pathologistLastname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathologistLastname {
      get { return pathologistLastname_; }
      set {
        pathologistLastname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathologist_firstname" field.</summary>
    public const int PathologistFirstnameFieldNumber = 12;
    private string pathologistFirstname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathologistFirstname {
      get { return pathologistFirstname_; }
      set {
        pathologistFirstname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slide_id" field.</summary>
    public const int SlideIdFieldNumber = 13;
    private string slideId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlideId {
      get { return slideId_; }
      set {
        slideId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slide_sequence" field.</summary>
    public const int SlideSequenceFieldNumber = 14;
    private string slideSequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlideSequence {
      get { return slideSequence_; }
      set {
        slideSequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blockid" field.</summary>
    public const int BlockidFieldNumber = 15;
    private string blockid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Blockid {
      get { return blockid_; }
      set {
        blockid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_sequence" field.</summary>
    public const int BlockSequenceFieldNumber = 16;
    private string blockSequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockSequence {
      get { return blockSequence_; }
      set {
        blockSequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specimen_id" field.</summary>
    public const int SpecimenIdFieldNumber = 17;
    private string specimenId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecimenId {
      get { return specimenId_; }
      set {
        specimenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specimen_sequence" field.</summary>
    public const int SpecimenSequenceFieldNumber = 18;
    private string specimenSequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecimenSequence {
      get { return specimenSequence_; }
      set {
        specimenSequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as obr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(obr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderSequenceId != other.OrderSequenceId) return false;
      if (PlacerOrderNumber != other.PlacerOrderNumber) return false;
      if (ProtocolNumber != other.ProtocolNumber) return false;
      if (ProtocolName != other.ProtocolName) return false;
      if (OrderType != other.OrderType) return false;
      if (ObservationDateTime != other.ObservationDateTime) return false;
      if (SpecimenName != other.SpecimenName) return false;
      if (SpecimenDescription != other.SpecimenDescription) return false;
      if (SurgicalProcedureName != other.SurgicalProcedureName) return false;
      if (PathologistNpi != other.PathologistNpi) return false;
      if (PathologistLastname != other.PathologistLastname) return false;
      if (PathologistFirstname != other.PathologistFirstname) return false;
      if (SlideId != other.SlideId) return false;
      if (SlideSequence != other.SlideSequence) return false;
      if (Blockid != other.Blockid) return false;
      if (BlockSequence != other.BlockSequence) return false;
      if (SpecimenId != other.SpecimenId) return false;
      if (SpecimenSequence != other.SpecimenSequence) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderSequenceId.Length != 0) hash ^= OrderSequenceId.GetHashCode();
      if (PlacerOrderNumber.Length != 0) hash ^= PlacerOrderNumber.GetHashCode();
      if (ProtocolNumber.Length != 0) hash ^= ProtocolNumber.GetHashCode();
      if (ProtocolName.Length != 0) hash ^= ProtocolName.GetHashCode();
      if (OrderType.Length != 0) hash ^= OrderType.GetHashCode();
      if (ObservationDateTime.Length != 0) hash ^= ObservationDateTime.GetHashCode();
      if (SpecimenName.Length != 0) hash ^= SpecimenName.GetHashCode();
      if (SpecimenDescription.Length != 0) hash ^= SpecimenDescription.GetHashCode();
      if (SurgicalProcedureName.Length != 0) hash ^= SurgicalProcedureName.GetHashCode();
      if (PathologistNpi.Length != 0) hash ^= PathologistNpi.GetHashCode();
      if (PathologistLastname.Length != 0) hash ^= PathologistLastname.GetHashCode();
      if (PathologistFirstname.Length != 0) hash ^= PathologistFirstname.GetHashCode();
      if (SlideId.Length != 0) hash ^= SlideId.GetHashCode();
      if (SlideSequence.Length != 0) hash ^= SlideSequence.GetHashCode();
      if (Blockid.Length != 0) hash ^= Blockid.GetHashCode();
      if (BlockSequence.Length != 0) hash ^= BlockSequence.GetHashCode();
      if (SpecimenId.Length != 0) hash ^= SpecimenId.GetHashCode();
      if (SpecimenSequence.Length != 0) hash ^= SpecimenSequence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderSequenceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderSequenceId);
      }
      if (PlacerOrderNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlacerOrderNumber);
      }
      if (ProtocolNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProtocolNumber);
      }
      if (ProtocolName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProtocolName);
      }
      if (OrderType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderType);
      }
      if (ObservationDateTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ObservationDateTime);
      }
      if (SpecimenName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SpecimenName);
      }
      if (SpecimenDescription.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SpecimenDescription);
      }
      if (SurgicalProcedureName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SurgicalProcedureName);
      }
      if (PathologistNpi.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PathologistNpi);
      }
      if (PathologistLastname.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PathologistLastname);
      }
      if (PathologistFirstname.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PathologistFirstname);
      }
      if (SlideId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SlideId);
      }
      if (SlideSequence.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SlideSequence);
      }
      if (Blockid.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Blockid);
      }
      if (BlockSequence.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BlockSequence);
      }
      if (SpecimenId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SpecimenId);
      }
      if (SpecimenSequence.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(SpecimenSequence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderSequenceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderSequenceId);
      }
      if (PlacerOrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlacerOrderNumber);
      }
      if (ProtocolNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolNumber);
      }
      if (ProtocolName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolName);
      }
      if (OrderType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderType);
      }
      if (ObservationDateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObservationDateTime);
      }
      if (SpecimenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecimenName);
      }
      if (SpecimenDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecimenDescription);
      }
      if (SurgicalProcedureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SurgicalProcedureName);
      }
      if (PathologistNpi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathologistNpi);
      }
      if (PathologistLastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathologistLastname);
      }
      if (PathologistFirstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathologistFirstname);
      }
      if (SlideId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlideId);
      }
      if (SlideSequence.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlideSequence);
      }
      if (Blockid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Blockid);
      }
      if (BlockSequence.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BlockSequence);
      }
      if (SpecimenId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecimenId);
      }
      if (SpecimenSequence.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecimenSequence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(obr other) {
      if (other == null) {
        return;
      }
      if (other.OrderSequenceId.Length != 0) {
        OrderSequenceId = other.OrderSequenceId;
      }
      if (other.PlacerOrderNumber.Length != 0) {
        PlacerOrderNumber = other.PlacerOrderNumber;
      }
      if (other.ProtocolNumber.Length != 0) {
        ProtocolNumber = other.ProtocolNumber;
      }
      if (other.ProtocolName.Length != 0) {
        ProtocolName = other.ProtocolName;
      }
      if (other.OrderType.Length != 0) {
        OrderType = other.OrderType;
      }
      if (other.ObservationDateTime.Length != 0) {
        ObservationDateTime = other.ObservationDateTime;
      }
      if (other.SpecimenName.Length != 0) {
        SpecimenName = other.SpecimenName;
      }
      if (other.SpecimenDescription.Length != 0) {
        SpecimenDescription = other.SpecimenDescription;
      }
      if (other.SurgicalProcedureName.Length != 0) {
        SurgicalProcedureName = other.SurgicalProcedureName;
      }
      if (other.PathologistNpi.Length != 0) {
        PathologistNpi = other.PathologistNpi;
      }
      if (other.PathologistLastname.Length != 0) {
        PathologistLastname = other.PathologistLastname;
      }
      if (other.PathologistFirstname.Length != 0) {
        PathologistFirstname = other.PathologistFirstname;
      }
      if (other.SlideId.Length != 0) {
        SlideId = other.SlideId;
      }
      if (other.SlideSequence.Length != 0) {
        SlideSequence = other.SlideSequence;
      }
      if (other.Blockid.Length != 0) {
        Blockid = other.Blockid;
      }
      if (other.BlockSequence.Length != 0) {
        BlockSequence = other.BlockSequence;
      }
      if (other.SpecimenId.Length != 0) {
        SpecimenId = other.SpecimenId;
      }
      if (other.SpecimenSequence.Length != 0) {
        SpecimenSequence = other.SpecimenSequence;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderSequenceId = input.ReadString();
            break;
          }
          case 18: {
            PlacerOrderNumber = input.ReadString();
            break;
          }
          case 26: {
            ProtocolNumber = input.ReadString();
            break;
          }
          case 34: {
            ProtocolName = input.ReadString();
            break;
          }
          case 42: {
            OrderType = input.ReadString();
            break;
          }
          case 50: {
            ObservationDateTime = input.ReadString();
            break;
          }
          case 58: {
            SpecimenName = input.ReadString();
            break;
          }
          case 66: {
            SpecimenDescription = input.ReadString();
            break;
          }
          case 74: {
            SurgicalProcedureName = input.ReadString();
            break;
          }
          case 82: {
            PathologistNpi = input.ReadString();
            break;
          }
          case 90: {
            PathologistLastname = input.ReadString();
            break;
          }
          case 98: {
            PathologistFirstname = input.ReadString();
            break;
          }
          case 106: {
            SlideId = input.ReadString();
            break;
          }
          case 114: {
            SlideSequence = input.ReadString();
            break;
          }
          case 122: {
            Blockid = input.ReadString();
            break;
          }
          case 130: {
            BlockSequence = input.ReadString();
            break;
          }
          case 138: {
            SpecimenId = input.ReadString();
            break;
          }
          case 146: {
            SpecimenSequence = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

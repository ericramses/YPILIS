<Application x:Class="YellowstonePathology.UI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:converter="clr-namespace:YellowstonePathology.UI.Converter"
    xmlns:validationRules="clr-namespace:YellowstonePathology.UI.ValidationRules"
    xmlns:LocalUI="clr-namespace:YellowstonePathology.UI" 
	xmlns:customControls="clr-namespace:YellowstonePathology.UI.CustomControls">
    <Application.Resources>
        <converter:DotDotDotConverter x:Key="DotDotDotConverter"/>
        <converter:ShortDateConverter x:Key="ShortDateConverter"/>
        <converter:SplitDateTimeConverter x:Key="SplitDateTimeConverter"/>
        <converter:BooleanVisibilityConverter x:Key="BooleanVisibilityConverter"/>
        <converter:BooleanVisibilityHiddenConverter x:Key="BooleanVisibilityHiddenConverter"/>
        <converter:BooleanInverseVisibilityConverter x:Key="BooleanInverseVisibilityConverter"/>
        <converter:BooleanYesNoConverter x:Key="BooleanYesNoConverter"/>
        <converter:ShortDateYMDConverter x:Key="ShortDateYMDConverter"/>
        <converter:ShortDateTimeConverter x:Key="ShortDateTimeConverter"/>
        <converter:MilitaryDateTimeConverter x:Key="MilitaryDateTimeConverter"/>
        <converter:MilitaryDateTimeConverterV2 x:Key="MilitaryDateTimeConverterV2"/>
		<converter:MilitaryTimeConverter x:Key="MilitaryTimeConverter"/>
		<converter:PhoneNumberConverter x:Key="PhoneNumberConverter"/>
        <converter:ShortTimeConverter x:Key="ShortTimeConverter"/>
        <converter:PercentConverter x:Key="PercentConverter"/>
        <converter:PercentConverterV2 x:Key="PercentConverterV2"/>
		<converter:GatingPercentConverter x:Key="GatingPercentConverter"/>
        <converter:NumberConverter x:Key="NumberConverter"/>
        <converter:ListViewBackgroundConverter x:Key="ListViewBackgroundConverter"/>
        <converter:ComboBoxNullValueConverter x:Key="ComboBoxNullValueConverter"/>
        <converter:SocialSecurityNumberConverter x:Key="SocialSecurityNumberConverter"/>
        <converter:UpperCaseConverter x:Key="UpperCaseConverter"/>
        <converter:LowerCaseConverter x:Key="LowerCaseConverter"/>
        <converter:SystemUserIdConverter x:Key="SystemUserIdConverter"/>
        <converter:ReportableCaseConverter x:Key="ReportableCaseConverter"/>
        <converter:AliquotTypeRadioButtonConverter x:Key="AliquotTypeRadioButtonConverter"/>
        <converter:AliquotTypeIsIntraoperativeConverter x:Key="AliquotTypeIsIntraoperativeConverter"/>
        <converter:BooleanStringVisibilityConverter x:Key="BooleanStringVisibilityConverter"/>
        <converter:CytologyLoginClinicalHistoryConverter x:Key="CytologyLoginClinicalHistoryConverter"/>
        <converter:CytologyLoginSpecimenSourceConverter x:Key="CytologyLoginSpecimenSourceConverter"/>
        <converter:CytologyLoginPatientTypeConverter x:Key="CytologyLoginPatientTypeConverter"/>
        <converter:CytologyLoginIcd9Converter x:Key="CytologyLoginIcd9Converter"/>
        <converter:CytologyPanelBrushConverter x:Key="CytologyPanelBrushConverter"/>
        <converter:CytologyQCTextConverter x:Key="CytologyQCTextConverter"/>
        <converter:CytologyScreeningCommentConverter x:Key="CytologyScreeningCommentConverter"/>
		<converter:CytologyScreeningTitleConverter x:Key="CytologyScreeningTitleConverter"/>
        <converter:CollectionDateTimeBackgroundConverter x:Key="CollectionDateTimeBackgroundConverter"/>
		<converter:BooleanStringConverter x:Key="BooleanStringConverter"/>
		<converter:ColorConverter x:Key="ColorConverter" />
        <converter:ItemsReceivedColorConverter x:Key="ItemsReceivedColorConverter" />
		<converter:BooleanAsteriskConverter x:Key="BooleanAsteriskConverter"/>
		<converter:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converter:PathologistSpecimenColorConverter x:Key="PathologistSpecimenColorConverter"/>
		<converter:ClientOrderDetailColorConverter x:Key="ClientOrderDetailColorConverter"/>
		<converter:CaseDocumentColorConverter x:Key="CaseDocumentColorConverter"/>
		<converter:SpecimenOrderColorConverter x:Key="SpecimenOrderColorConverter"/>
		<converter:BlockColorConverter x:Key="BlockColorConverter"/>
		<converter:ControlWidthConverter x:Key="ControlWidthConverter"/>
		<converter:EnumBooleanConverter x:Key="EnumBooleanConverter"/>
		<converter:Last12CharacterConverter x:Key="Last12CharacterConverter"/>
		<converter:ResultCodeResultConverter x:Key="ResultCodeResultConverter"/>

		<converter:PanelSetIdConverter x:Key="PanelSetIdConverter"/>
    	<converter:NullableIntConverter x:Key="NullableIntConverter" />
        <converter:NullableDoubleConverter x:Key="NullableDoubleConverter" />

        <validationRules:IntValidation x:Key="IntValidation"/>
        <validationRules:ShortDateTimeValidation x:Key="ShortDateTimeValidation"/>
        <validationRules:ShortDateValidation x:Key="ShortDateValidation"/>
        <validationRules:BirthDateValidation x:Key="BirthDateValidation"/>
        <validationRules:SSNValidRule x:Key="SSNValidRule"/>        

        <SolidColorBrush x:Key="FocusedBackgroundBrush" Color="LemonChiffon" />
        <SolidColorBrush x:Key="FocusedBorderBrush" Color="LightGray" />
        <SolidColorBrush x:Key="FocusedForegroundBrush" Color="Black" />

        <Style TargetType="TreeViewItem">
            <Setter Property="IsExpanded" Value="True"/>
        </Style>

        <Style TargetType="Button" x:Key="NormalButton">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="NormalTextBlock">
            <Setter Property="Margin" Value="2"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="TextBox" x:Key="NewTextBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Style.Triggers>
                <Trigger Property="TextBox.IsEnabled" Value="False">
                    <Setter Property="TextBox.Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="TextBox.IsEnabled" Value="True">
                    <Setter Property="TextBox.Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ComboBox" x:Key="NewComboBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="2"/>
            <Style.Triggers>
                <Trigger Property="ComboBox.IsEnabled" Value="False">
                    <Setter Property="ComboBox.Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="ComboBox.IsEnabled" Value="True">
                    <Setter Property="ComboBox.Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="TextBox" x:Key="ReadOnlyTextBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="IsReadOnly" Value="true"/>
            <Setter Property="Background" Value="#EEE"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
        </Style>

        <Style TargetType="TextBox" x:Key="NormalTextBox">
            <Setter Property="Margin" Value="3"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="BoundTextBox">
            <Setter Property="TextBox.Margin" Value="3"></Setter>
            <Setter Property="TextBox.Width" Value="300"></Setter>
        </Style>
        <Style x:Key="HeadingTextBlock">
            <Setter Property="TextBlock.Width" Value="120"></Setter>
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
            <Setter Property="TextBlock.TextAlignment" Value="Right"></Setter>
        </Style>
        <Style x:Key="BoldRightJustifiedTextBlock">
            <Setter Property="TextBlock.Margin" Value="5,2,2,2"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
            <Setter Property="TextBlock.TextAlignment" Value="Right"></Setter>
        </Style>
        <Style x:Key="AlternateRowColors" TargetType="{x:Type ListViewItem}">
            <Setter Property="Background">
                <Setter.Value>
                    <Binding RelativeSource="{RelativeSource Self}" Converter="{StaticResource ListViewBackgroundConverter}"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RadioButtonStyle">
            <Setter Property="RadioButton.Margin" Value="3"></Setter>
        </Style>
        <Style x:Key="GatingTextBox">
            <Setter Property="TextBox.Margin" Value="3"></Setter>
            <Setter Property="TextBox.Width" Value="75"></Setter>
        </Style>
        <Style x:Key="GatingTextBlock">
            <Setter Property="TextBlock.Width" Value="120"></Setter>
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
            <Setter Property="TextBlock.TextAlignment" Value="Left"></Setter>
        </Style>
        <Style x:Key="GatingRadioButton">
            <Setter Property="RadioButton.Margin" Value="3"></Setter>
        </Style>
        <Style x:Key="LabelStyle">
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
        </Style>
        <Style x:Key="HeadingStyle">
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
        </Style>
        <Style x:Key="RadioButtonStackPanel">
            <Setter Property="RadioButton.Margin" Value="10,0,10,10"></Setter>
        </Style>
        <Style x:Key="TextBoxMultiline">
            <Setter Property="TextBox.Margin" Value="3"></Setter>
            <Setter Property="TextBox.TextWrapping" Value="Wrap"></Setter>
        </Style>
        <Style x:Key="TextBlockHeaderRight">
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
            <Setter Property="TextBlock.TextAlignment" Value="Right"></Setter>
            <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>
        </Style>
        <Style x:Key="TextBlockHeaderLeft">
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
        </Style>
        <ControlTemplate x:Key="validationTemplate">
            <DockPanel>
                <TextBlock Foreground="Red" FontSize="20">!</TextBlock>
                <AdornedElementPlaceholder/>
            </DockPanel>
        </ControlTemplate>

        <Style x:Key="textBoxValidatedGating" TargetType="{x:Type TextBox}">
            <Setter Property="TextBlock.Width" Value="75"></Setter>
            <Setter Property="TextBlock.Margin" Value="3"></Setter>
            <Setter Property="TextBlock.TextAlignment" Value="Left"></Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="TextBlock.Foreground" Value="Red"/>
                    <Setter Property="TextBlock.FontWeight" Value="Bold"/>
                    <Setter Property="ToolTip"
					Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="ForegroundBrush" Color="#000" />
        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />
        <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />
        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
        <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
        <SolidColorBrush x:Key="InvalidBorderBrush" Color="Red" />
        
        <Style x:Key="ValidTextBoxStyle" TargetType="{x:Type customControls:ValidTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="HasError" Value="false"/>            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border 
						  Name="Border"
						  CornerRadius="2" 
						  Padding="2"
						  Background="{StaticResource WindowBackgroundBrush}"
						  BorderBrush="{StaticResource SolidBorderBrush}"
						  BorderThickness="1" >
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontSize" Value="12"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                    <Setter Property="HasError" Value="True"/>
                </Trigger>
                <Trigger Property="Validation.HasError" Value="False">
                    <Setter Property="HasError" Value="False"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TextBoxStyleWithValidation" TargetType="{x:Type customControls:ValidTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="HasError" Value="false"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="AllowDrop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border 
						  Name="Border"
						  CornerRadius="2" 
						  Padding="2"
						  Background="{StaticResource WindowBackgroundBrush}"
						  BorderBrush="{StaticResource SolidBorderBrush}"
						  BorderThickness="1" >
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource FocusedBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusedBorderBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource FocusedForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontSize" Value="12"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                    <Setter Property="HasError" Value="True"/>
                </Trigger>
                <Trigger Property="Validation.HasError" Value="False">
                    <Setter Property="HasError" Value="False"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TextBoxStyleWithOutValidation" TargetType="{x:Type TextBoxBase}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="AllowDrop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border 
						  Name="Border"
						  CornerRadius="2" 
						  Padding="2"
						  Background="{StaticResource WindowBackgroundBrush}"
						  BorderBrush="{StaticResource SolidBorderBrush}"
						  BorderThickness="1" >
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource FocusedBackgroundBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusedBorderBrush}"/>
                                <Setter Property="Foreground" Value="{StaticResource FocusedForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontSize" Value="12"/>
        </Style>

    </Application.Resources>
</Application>
